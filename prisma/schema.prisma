generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // optional during migrate dev
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts  Account[]
  sessions  Session[]
  bets      Bet[]
  bankroll  BankrollEntry[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ModelRun {
  id        String   @id @default(cuid())
  name      String
  version   String?
  notes     String?
  createdAt DateTime @default(now())

  edges     Edge[]
}

model Edge {
  id         String   @id @default(cuid())
  sport      String
  league     String?
  eventId    String?
  market     String?
  pick       String?
  fairOdds   Float?
  bookOdds   Float?
  edgePct    Float?
  stakeUnits Float?
  createdAt  DateTime @default(now())

  modelRunId String?
  modelRun   ModelRun? @relation(fields: [modelRunId], references: [id])
}

model Bet {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // --- Sizing inputs (optional)
  bookOdds   Int?
  fairOdds   Int?
  edgePct    Decimal? @db.Decimal(8,4) // store % as e.g. 3.25 => 3.2500

  // Relation to User (this is what was missing)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Your bet fields
  sport         String
  league        String?
  eventId       String?
  market        String?
  pick          String
  stakeUnits    Float
  oddsAmerican  Int?
  oddsDecimal   Float?
  notes         String?
  status        String   @default("pending")
  realizedUnits Float?

  @@index([userId, createdAt])
}


model BankrollEntry {
  id        String   @id @default(cuid())
  userId    String
  kind      String
  units     Float
  notes     String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}


